//Longest Increasing Subsequence
/*Approach using Tabulation
* Make a dp array and initialize all dp(i) with 1
* For every element from L->R, iterate from j=0 to j=i-1
* Checking If(a[i]>a[j]) dp[i]=max(dp[i],1+dp[j])
* After loop ends, output dp(n-1) 
* Complexity=O(n^2)
*/

const int N = 1e5 + 2, MOD = 1e9 + 7;
int dp[N];
//memoization
int lis(vi& a, int n) {
    if (dp[n] != -1) return dp[n];
    dp[n] = 1; //single element is also an lis
    rep(i, n) {
        if (a[n] > a[i]) dp[n] = max(dp[n], 1 + lis(a, i));
    }
    return dp[n];
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    rep(i, N) dp[i] = -1;
    int n; cin >> n;
    vi a(n);
    rep(i, n) cin >> a[i];
    cout << lis(a, n - 1) << endl;

    //tabulation approach
    vi DP(n, 1);
    int ans = 0;
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (a[i] > a[j]) DP[i] = max(DP[i], 1 + DP[j]);
        }
        ans = max(ans, dp[i]);
    }
    cout << ans << endl;

    return 0;
}
