//Maximum length of Bitonic subsequence
/*Given array of n numbers. Find the maxi length of
bitonic subsequence. A subsequence is bitonic if it is 
first strictly increasing and then strictly decreasing
or entirely increasing or decreasing*/
/*Idea:
* 1.you have length of increasing subsequence from 0 (forward)
* 2.you have length of decreasing subsequence from i to n-1(backward)
* Bitonic subsequence = forward[i]+backward[i]-1
*/
//modification of LIS

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    int n = 8;
    vi a = {};
    vi forward(n, 1), backward(n, 1);
    rep(i, n) {
        rep(j, i) {
            if (a[i] > a[j]) forward[i] = max(forward[i], 1 + forward[j]);
        }
    }
    for (int i = n - 1; i >= 0; i--) {
        for (int j = n - 1; j > i; j--) {
            if (a[i] > a[j]) backward[i] = max(backward[i], 1 + backward[j]);
        }
    }
    int ans = 0;
    for (int i = 0; i < n; i++) {
        ans = max(ans, forward[i] + backward[i] - 1);
    }
    cout << ans;

    return 0;
}
