//Minimum number of squares whose sum equals n
//Recurrence relation: f(x)=min(f(x-i*i)+1) {i varies from 1 to sqrt(x)}
const int N = 1e3 + 2, MOD = 1e9 + 7;
int dp[N];   //memoization


int MinSquare(int n) {
    if (n == 1 || n == 2 || n == 3 || n == 0) return n;
    
    if (dp[n] != MOD) return dp[n];

    for (int i = 1; i * i <= n; i++) {
        dp[n] = min(dp[n], 1 + MinSquare(n - i * i));
    }
    return dp[n];
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    rep(i, N) dp[i] = MOD;
    int n; cin >> n;
    vi DP(n + 1, MOD);  // tabulation
    DP[0] = 0; DP[1] = 1; DP[2] = 2; DP[3] = 3;
    for (int i = 1; i * i <= n; i++) {
        for (int j = 0; i * i + j <= n; j++) {
            DP[i * i + j] = min(DP[i * i + j], 1 + DP[j]);
        }
    }
    cout << DP[n];

    cout << MinSquare(n) << endl;

    return 0;
}

