//K-ordered LCS
/*Print the lcs of 2 seq given that u r allowed
to change atmost k elements in the 1st seq to any
value u wish
*/
int n, m, k;
vi a, b;
int dp[2005][2005][7];
int solve(int i, int j, int k) {
    if (i == n || j == m) {
        return 0;
    }
    if (dp[i][j][k] != -1) return dp[i][j][k];
    int c1(0), c2(0), c3(0);
    if (a[i] == b[j]) c1 = 1 + solve(i + 1, j + 1, k);
    if (k > 0) c2 = 1 + solve(i + 1, j + 1, k - 1);
    c3 = max(solve(i + 1, j, k), solve(i, j + 1, k));
    return dp[i][j][k] = max({ c1,c2,c3 });
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    memset(dp, -1, sizeof(dp));
    cin >> n >> m >> k;
    a = vi(n);
    b = vi(m);
    for (auto& i : a) cin >> i;
    for (auto& i : b) cin >> i;
    cout << solve(0, 0, k);

    return 0;
}

