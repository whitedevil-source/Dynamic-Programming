// Matrix Chain Multiplication
// Minimize number of computations
/*Approach 1: Using memoization
* Write the recursive relation and memoize it
* Approach 2: Tabulation (bottom up)
* Build from base
* For each gap from gap=0 to gap=n-2 compute
* all submatrix multiplications and their results
* Build the answer usinf for every k=i to k=j-1
* dp[i][j]=min(dp[i][j],dp[i][k]+dp[k+1][j]+a[i-1]*a[k]*a[j])
* TIME complexity = O(N^3)
*/

const int N = 102, MOD = 1e9 + 7;
int a[N];
int dp[N][N];
int mcm(int i, int j) {
    if (i == j) return 0;
    if (dp[i][j] != -1) return dp[i][j];
    dp[i][j] = MOD;
    for (int k = i; k = j; k++) {
        dp[i][j] = min(dp[i][j], mcm(i, k) + mcm(k + 1, j) + a[i - 1] * a[k] * a[j]);
    }
    return dp[i][j];
}

#define FIO ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define test ll t; cin>>t; while(t--)
int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    // freopen("input.txt","r",stdin); freopen("output.txt","w",stdout);
    
    int n; cin >> n;
    memset(dp, -1, sizeof(dp));

    rep(i, n) cin >> a[i];

    cout << mcm(1, n - 1);

    //tabulation
    for (int i = 1; i < n; i++) {
        dp[i][i] = 0;
    }
    for (int l = 2; l < n; l++) {
        for (int i = 1; i < n - l + 1; i++) {
            int j = i + l - 1;
            dp[i][j] = MOD;
            for (int k = i; k < j; k++) {
                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + a[i - 1] * a[k] * a[j]);
            }
        }
    }
    cout << dp[1][n - 1];

    return 0;
}

